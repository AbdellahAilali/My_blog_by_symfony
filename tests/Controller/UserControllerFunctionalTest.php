<?php

namespace App\Controller;

use App\Entity\User;
use Doctrine\Common\Persistence\PersistentObject;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Mapping\ClassMetadata;
use PHPUnit\Util\Json;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
use Symfony\Component\BrowserKit;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;


class UserControllerFunctionalTest extends WebTestCase
{

    protected function setUp()
    {
        /** @var PersistentObject persist,flush */

        static::createClient();

        $em = self::$kernel->getContainer()->get('doctrine.orm.entity_manager');

        $this->createDb($em);

        $loader = new \Nelmio\Alice\Loader\NativeLoader();
        $objectSet = $loader->loadFile(__DIR__ . '/../Fixtures/fixtures.yml')->getObjects();

        foreach ($objectSet as $object) {
            $em->persist($object);
        }

        $em->flush();
        $em->clear();

        parent::setUp(); // TODO: Change the autogenerated stub
    }
    /*
        public function testLoadUserAction()
        {

            $client = self::$kernel->getContainer()->get('test.client');

            $client->request("GET", "/user/cd72f69f-ae27-4257-bd0c-1aeff64b6f60");

            $this->assertSame(200, $client->getResponse()->getStatusCode());
        }*/

    /*  public function testDeleteUser()
      {
          $client = self::$kernel->getContainer()->get('test.client');

          $client->request("DELETE", "/user/cd");

          $this->assertSame(200, $client->getResponse()->getStatusCode(), $client->getResponse()->getContent());

      }*/

    function testCreateUserAction()
     {
         $em = self::$kernel->getContainer()->get('doctrine.orm.entity_manager');

         $client = self::$kernel->getContainer()->get('test.client');

         $client->request("POST", "/user/", array(), array(), array(),

             '{"id":"cd72f69f-ae27-4257-bd0c-1aeff64b6f50","lastname":"san",
              "firstname":"gg","dateNaissance":"2005-08-15T15:52:01+00:00"}', true);

         $this->assertSame(200, $client->getResponse()->getStatusCode());

         $user = $em->getRepository(User::class)->findOneBy(["id" => "cd72f69f-ae27-4257-bd0c-1aeff64b6f50"]);

         $this->assertEquals("san", $user->getLastname());
         $this->assertEquals("gg", $user->getFirstname());
         $this->assertEquals(new \DateTime("2005-08-15T15:52:01+00:00"), $user->getDateNaissance());

     }

    /*

     public function testModifyUserAction()
     {
         $em = self::$kernel->getContainer()->get('doctrine.orm.entity_manager');

         $client = self::$kernel->getContainer()->get('test.client');

         $client->request("PUT", "/user/modify/cd72f69f-ae27-4257-bd0c-1aeff64b6f60", array(), array(), array(),
             '{"id":"cd72f69f-ae27-4257-bd0c-1aeff64b6f60","lastname":"tony","firstname":"montana",
             "dateNaissance":"1994-08-15T15:52:01+00:00"}', true);

         $this->assertSame(200, $client->getResponse()->getStatusCode());

         $user = $em->getRepository(User::class)->findOneBy(["id" => "cd72f69f-ae27-4257-bd0c-1aeff64b6f60"]);

         $this->assertEquals("tony", $user->getLastname());
         $this->assertEquals("montana", $user->getFirstname());
         $this->assertEquals(new \DateTime("1994-08-15T15:52:01+00:00"), $user->getDateNaissance());

     }*/
    /*
        public function testLoadAllUserAction()
        {
            $em = self::$kernel->getContainer()->get('doctrine.orm.entity_manager');

            $client = self::$kernel->getContainer()->get('test.client');

            $client->request("GET", "/userAll/");

            $this->assertSame(200, $client->getResponse()->getStatusCode());


            $response = $client->getResponse();

            $expected = '[{"id":"001","firstname":"b","lastname":"a"}]';

            echo $expected;

            echo $response->getContent();

            //$this->assertEquals($expected, $response);
        }*/


    private function createDb(EntityManager $em)
    {
        $tool = new \Doctrine\ORM\Tools\SchemaTool($em);
        $classes = [];
        /** @var ClassMetadata $class */

        foreach ($em->getMetadataFactory()->getAllMetadata() as $class) {
            $classes[] = $class;
        }

        $tool->dropSchema($classes);
        $tool->createSchema($classes);
    }


}