<?php

namespace App\Controller;

use App\Entity\User;
use Doctrine\Common\Persistence\PersistentObject;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Mapping\ClassMetadata;
use PHPUnit\Util\Json;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
use Symfony\Component\BrowserKit;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;


class UserControllerFunctionalTest extends WebTestCase
{

    protected function setUp()
    {
        /** @var PersistentObject persist,flush */

        static::createClient();

        $em = self::$kernel->getContainer()->get('doctrine.orm.entity_manager');

        $this->createDb($em);

        $loader = new \Nelmio\Alice\Loader\NativeLoader();
        $objectSet = $loader->loadFile(__DIR__ . '/../Fixtures/fixtures.yml')->getObjects();

        foreach ($objectSet as $object) {
            $em->persist($object);
        }

        $em->flush();
        //$em->clear();

        parent::setUp(); // TODO: Change the autogenerated stub
    }

   /* public function testLoadUserAction()
    {

        $client = self::$kernel->getContainer()->get('test.client');

        $client->request("GET", "/user/ab0de897-c33d-4a1f-aaf6-6e5513c17639");

        $this->assertSame(200, $client->getResponse()->getStatusCode());
    }*/

  /*  public function testDeleteUser()
    {
        $client = self::$kernel->getContainer()->get('test.client');

        $client->request("DELETE", "/user/ab0de897-c33d-4a1f-aaf6-6e5513c17639");

        $this->assertSame(200, $client->getResponse()->getStatusCode(), $client->getResponse()->getContent());

    }*/

    function testCreateUserAction()
    {
        $em = self::$kernel->getContainer()->get('doctrine.orm.entity_manager');

        $client = self::$kernel->getContainer()->get('test.client');

        $client->request("POST", "/user/", array(), array(), array(),

            '{"id":"02e6c5f0-5098-46aa-9fd8-7b44361092d3","firstname":"rick",
              "lastname":"Grimm","dateNaissance":"1977-08-15T15:52:01+00:00"}', true);

        $this->assertSame(200, $client->getResponse()->getStatusCode());

        $user = $em->getRepository(User::class)->find(["id" => "02e6c5f0-5098-46aa-9fd8-7b44361092d3"]);

        $this->assertEquals("Grimm", $user->getLastname());
        $this->assertEquals("rick", $user->getFirstname());
        $this->assertEquals(new \DateTime("1977-08-15T15:52:01+00:00"), $user->getDateNaissance());

    }


   /* public function testModifyUserAction()
    {
        $em = self::$kernel->getContainer()->get('doctrine.orm.entity_manager');

        $client = self::$kernel->getContainer()->get('test.client');

        $client->request("PUT", "/user/modify/ab0de897-c33d-4a1f-aaf6-6e5513c17639", array(), array(), array(),
            '{"id":"cd72f69f-ae27-4257-bd0c-1aeff64b6f60","lastname":"tony","firstname":"montana",
            "dateNaissance":"1994-08-15T15:52:01+00:00"}', true);

        $this->assertSame(200, $client->getResponse()->getStatusCode());

        $user = $em->getRepository(User::class)->findOneBy(["id" => "ab0de897-c33d-4a1f-aaf6-6e5513c17639"]);

        $this->assertEquals("tony", $user->getLastname());
        $this->assertEquals("montana", $user->getFirstname());
        $this->assertEquals(new \DateTime("1994-08-15T15:52:01+00:00"), $user->getDateNaissance());

    }*/

  /*  public function testLoadAllUserAction()
    {

        $client = self::$kernel->getContainer()->get('test.client');

        $client->request("GET", "/userAll/");

        $this->assertSame(200, $client->getResponse()->getStatusCode());

        $response = $client->getResponse();

        $expected = '[{"id":"ab0de897-c33d-4a1f-aaf6-6e5513c17639","firstname":"Abdellah","lastname":"Ailali","comments":[{"title":"Le chateau ambulant","comment":"ma description"}]}]';

        $this->assertEquals($expected, $response->getContent());
    }*/


    private function createDb(EntityManager $em)
    {
        $tool = new \Doctrine\ORM\Tools\SchemaTool($em);
        $classes = [];
        /** @var ClassMetadata $class */

        foreach ($em->getMetadataFactory()->getAllMetadata() as $class) {
            $classes[] = $class;
        }

        $tool->dropSchema($classes);
        $tool->createSchema($classes);
    }


}